{"ast":null,"code":"import _defineProperty from \"/Users/laurenbullen/Documents/GitHubRepos/react-quiz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/laurenbullen/Documents/GitHubRepos/react-quiz/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Question from './components/Question';\nimport QuestionCount from './components/QuestionCount';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temoporaryValue,\n        randomIndex; // while there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // and swap it with the current element.\n\n      temoporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temoporaryValue;\n    }\n\n    return array;\n  }\n\n  setUserAnswer(answer) {\n    this.setState(state => ({\n      answersCount: _objectSpread({}, state.answersCount, {\n        [answer]: (state.answersCount[answer] || 0) + 1\n      }),\n      answer: answer\n    }));\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"React Quiz\")), React.createElement(Quiz, {\n      answer: this.state.answer,\n      answerOptions: this.state.answerOptions,\n      questionId: this.state.questionId,\n      question: this.state.question,\n      questionTotal: quizQuestions.length,\n      onAnswerSelected: this.handleAnswerSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Question, {\n      content: \"What is your favorite holiday?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/laurenbullen/Documents/GitHubRepos/react-quiz/src/App.js"],"names":["React","Question","QuestionCount","quizQuestions","Quiz","App","Component","constructor","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","componentDidMount","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temoporaryValue","randomIndex","Math","floor","random","setUserAnswer","event","currentTarget","value","setTimeout","setNextQuestion","render","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Question from './components/Question';\nimport QuestionCount from './components/QuestionCount'\nimport quizQuestions from './api/quizQuestions'\nimport Quiz from './components/Quiz';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state ={\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    }\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n  \n  componentDidMount(){\n    const shuffledAnswerOptions = quizQuestions.map(question => this.shuffleArray(question.answers));\n\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    })\n  };\n\n  shuffleArray(array) {\n    var currentIndex = array.length, temoporaryValue, randomIndex;\n\n    // while there remain elements to shuffle...\n    while (0 !== currentIndex){\n\n      // pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // and swap it with the current element.\n      temoporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temoporaryValue\n\n    }\n    return array;\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }))\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n    if(this.state.questionId < quizQuestions.length){\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n\n    }\n  }\n\n  render (){\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>React Quiz</h2>\n      </header>\n      <Quiz \n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n      <Question content='What is your favorite holiday?' />\n      {/* <QuestionCount /> */}\n    </div>\n  );\n}\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}